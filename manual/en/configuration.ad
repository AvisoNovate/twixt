title: Configuration
---

Twixt's configuration is used to determine where to locate asset resources on the classpath, 
and what folder to serve them under. It also maps file name extensions to MIME types, and
configures the file system cache.

The default options:

[source,clojure]
----
(def default-options
  {:path-prefix          "/assets/"
   :content-types        mime/default-mime-types
   :resolver-factories   [...]
   :twixt-template       {}
   :content-transformers {}
   :js-optimizations     :default
   :compressable         #{"text/*" "application/edn" "application/json"}
   :cache                {:cache-dir         (System/getProperty "twixt.cache-dir" (System/getProperty "java.io.tmpdir"))
                          :check-interval-ms 1000}
   :exports              {:interval-ms 5000
                          :output-dir  "resources/public"
                          :output-uri  ""
                          :assets      []}}
----

You can override :path-prefix to change the root URL for assets; / is an acceptable value.

The :content-types key maps file extensions to MIME types.

The :content-transformers key is a map of content type keys (as strings, such as "text/coffeescript") to a
transformation function; The CoffeeScript, Jade, and Less compilers operate by adding entries to :content-types and :content-transformers.

The :compressable key is a set used to identify which content types are compressable; note the use of the /* suffix to indicate
that all text content types are compressable. Anything not explicitly compressable is considered non-compressable.

The :twixt-template key is a map that provides default values for the :twixt request key.
This is often used to provide information specific to particular content transformers.

The :js-optimisations key is a keyword that specifies which Google Closure compilation level should be used to minimize
JavaScript files.
This may be one of :default, :none, :simple, :whitespace, :advanced.

The :default option corresponds to :none in development mode, and :simple in production mode.

The :resolver-factories key is a list of functions that create Asset resolvers.
Each factory function is passed the Twixt configuration and returns an Asset handler.
The two built-in factories search for standard resources (under META-INF/assets) and WebJars resources (under META-INF/resources/webjars).

The :cache key defines where the file system cache (of compiled assets) is stored, and
a what interval should invalidation checks occur (invalidation checks detect when any of the files from which an asset
is obtained and compiled have changed).

:exports is used to configure static exports.  A preset list of exports are located by their asset name and output under
the configured output directory.

Each value in the :assets collection can be a string, or a tuple of asset name and output alias.
This allows an asset to be exported and renamed at the same time.

For example, to make the asset css/site.less visible as css/site.css, you would supply a tuple:

[source,clojure]
----
  (-> default-options
      (update-in [:exports :assets] conj ["css/site.less" "css/site.css"]))
----

This would locate the resource file META-INF/assets/css/site.less, compile it from Less to CSS, and copy it
to resources/public/css/site.css.
A call to the io.aviso.twixt/get-asset-uri function would return the URI "/css/site.css",
which is exactly what the client will need to read the downloaded file.

Assets are scanned for changes at intervals, and exports occur automatically.
The thread which performs asset exports is started as needed, and will shutdown
once the Ring handler pipeline is garbage collected; you should generally include a call to (System/gc) to
ensure this happens promptly.

The output-uri is the URI corresponding to the output-dir.

Twixt does *not* provide a resource handler (to pick up files exported to the output directory) on its own; this is something
you must supply when setting up your Ring pipeline.


