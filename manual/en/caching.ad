title: Caching
---

It is desirable to have Twixt be able to serve-up files quickly, especially in production.
However, that is counter-balanced by the need to ensure the *correct* content is served.

The Twixt options specifies the location of the file system cache used to store compiled assets.

The location of this is specified in the key `[:cache :cache-dir]` in the Twixt options.

The cache-dir is the root level directory; actually caching occurs in sub-folders for "development"
or "production".

The cache folder is not cleared on startup; this allow compilation and other transformations
from previous executions

Generally, when a request for an asset is received, and the asset is in the cache, then
the response is served from the cache.

Periodically (as defined by the `[:cache :cache-interval-ms]` options key), a request for an asset
will perform a check against the dependencies of the asset; if any of the underlying resources have changed, then the
cache entry for the asset will be discarded and rebuilt.

In production, you may want to set the cache interval to be much higher than in development.

On concern is that a change in configuration can also invalidate caches.
For example, if you upgrade to a newer version of Twixt, or make changes to the configuration
of Twixt between executions, then the cached versions of the assets may not match what
Twixt would generate.

You should take this into account while developing and especially when deploying: it may be necessary
to manually delete the file system cache as part of deploying an application upgrade.

