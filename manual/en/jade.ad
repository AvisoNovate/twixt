title: Jade
---

link:http://jade-lang.com/[Jade] is a wonderful template engine ... as long as you
are comfortable with significant indentation.

Like many such tools, the real power comes from being able to extend Jade in various ways.

== twixt helper

Twixt places a helper object, +twixt+, into scope for your templates.  +twixt+ supplies a single method, +uri+.
You can pass the +uri+ method a relative path, or an absolute path (starting with a slash).

----
img(src=twixt.uri("logo.png"))
----

WARNING: When the path is relative, it is evaluated relative to the main Jade asset
(and explicitly not relative to any +include+ -ed Jade sources).

This will output a fully qualified asset URI:

----
<img src="/assets/8ee745bf/logo.png">
----

NOTE: A second function, `uris()`, should be added soon.

== Defining your own helpers

It is possible to define your own helper objects.

Helper objects are defined inside the Twixt context under keys +:jade+ +:helpers+.
This is a map of _string_ keys to creator functions.

Each creator function is passed the main Jade asset, and the Twixt context.
It uses this to initialize and return a helper object.
A new set of helper objects is created for each individual Jade compilation.

Generally, you will want to define a protocol, then use +reify+.  For example, this is the implementation of the +twixt+ helper:

----
(defprotocol TwixtHelper
  "A Jade4J helper object that is used to allow a template to resolve asset URIs."
  (uri
    [this path]
    "Used to obtain the URI for a given path. The path may be relative to the currently compiling
asset, or may be absoluate (with a leading slash). Throws an exception if the asset it not found."))

(defn- create-twixt-helper
  [asset context]
  (reify TwixtHelper
    (uri [_ path]
      (twixt/get-asset-uri context (complete-path asset path)))))
----

NOTE: Any asset URI will cause the asset in question to be added as a dependency of the main Jade template. This means
that changing the referenced asset will cause the Jade template to be re-compiled. This makes sense: changing an image
file will change the URI for the image file, which means that the Jade output should also change.

Creator functions can be added to the Twixt context using Ring middleware:

----
(handler (assoc-in request [:twixt :jade :helpers "adrotation"]
           create-ad-rotation-helper))
----

However, more frequently, you will just add to the Twixt options in your application's startup code:

----
(assoc-in twixt/default-options [:twixt-template :jade :helpers "adrotation"] 
  create-ad-rotation-helper))
----

This +:twixt-template+ key is used to create the +:twixt+ Ring request key.

== Defining your own variables

Variables are much the same as helpers, with two differences:

* The key is +:variables+ (under +:jade+, in the Twixt context)
* The value is the exact object to expose to the template

You can expose Clojure functions as variables if you wish; the Jade template should use +func.invoke()+ to call the function.

== Helper / Variable pitfalls

The main issue with helpers and variables relates to cache invalidation.
Twixt bases cache invalidation entirely on the contents of the underlying files.
There is now way for Twixt to know to invalidate the cache, just because the implementation
of a helper has changed, even if that means different markup is being rendered. This
is one of the primary reasons that link:caching.html[disk cache is disabled in production].

There is currently an ambiguity that comes into play when the referenced asset is a compressable file type (e.g., not an image
file). This can cause the Jade compiler to generate a compressed URI that, for a different request and client, will not be useful.

